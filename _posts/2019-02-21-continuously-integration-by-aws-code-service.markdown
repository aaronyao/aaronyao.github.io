---
layout: post
title:  "使用AWS Code服务构建持续集成环境"
categories: 持续集成 AWS CodeBuild CodeDeploy
---
**持续集成**是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。

####   持续集成
##### 简介
**持续集成**是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。

这是[Martin Fowler](https://martinfowler.com/articles/continuousIntegration.html)对持续集成的解释，实际的工作中的持续集成，简单理解为下面四个过程：
1. 开发者在完成自测（包括单元测试）后，向源代码服务器提交代码；
2. 源代码服务器触发自动构建过程；
3. 执行自动化测试过程（包括所有单元测试，集成测试和能够自动化的测试）；
4. 让软件达到`可交付`状态。

##### 作用和要点

持续集成最显著的作用是尽早的发现BUG从而修复BUG，而不是避免出现BUG。同时，它避免手工的编译、测试、和部署过程中产生的人为错误，能够提高开发团队的效率。

在实践持续集成的过程中，有一些要点：

- 代码必须本地编译成功后，才能提交待源代码服务器；
- 应该至少每天把代码提交到主线，与其他开发者进行协同；
- 立即修复失败的自动化构建；
- 构件好的软件包，应该能容易的被整个团队获取和访问；
- 向整个团队展示持续集成的过程和结果（构建一个Dashboard）。

##### 工具和相关方法
在持续集成之后，紧接着还有两个实践，**持续交付**和**持续部署**


####  AWS Code服务介绍 
- Code* 服务
- CodeCommit
- CodeBuild
- CodeDeploy
- CodePipeline

####  案例
- Github托管源代码
- Webhook通知代码编译



一开始项目和团队都很小的时候，持续集成看似起不了什么作用。在做了多年的软件开发和开发管理工作后，发现很多团队仍然停留在手工作坊的阶段，这是一定需要去改善的。